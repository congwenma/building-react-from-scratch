{"version":3,"sources":["webpack:///webpack/bootstrap 0ce5aa6a6b9b6b82b415","webpack:///./app.js","webpack:///../dilithium/dilithium.js","webpack:///../dilithium/src/Component.js","webpack:///../dilithium/src/Reconciler.js","webpack:///../dilithium/src/UpdateQueue.js","webpack:///../dilithium/src/assert.js","webpack:///../dilithium/src/instantiateComponent.js","webpack:///../dilithium/src/Element.js","webpack:///../dilithium/src/HostComponent.js","webpack:///../dilithium/src/DOM.js","webpack:///../dilithium/src/shouldUpdateComponent.js","webpack:///../dilithium/src/Mount.js","webpack:///../dilithium/src/DOMComponentWrapper.js","webpack:///../dilithium/src/MultiChild.js","webpack:///../dilithium/src/ChildReconciler.js","webpack:///../dilithium/src/traverseAllChildren.js"],"names":["Dilithium","require","CounterButton","Component","constructor","props","state","count","setInterval","setState","render","title","ColorSwatch","red","number","backgroundColor","height","width","document","getElementById","Element","Mount","DOMComponentWrapper","HostComponent","inject","module","exports","createElement","unmountComponentAtNode","Reconciler","UpdateQueue","assert","instantiateComponent","DOM","shouldUpdateComponent","_currentElement","_pendingState","_renderedComponent","_renderedNode","partialState","enqueueSetState","element","renderedElement","renderedComponent","markup","mountComponent","nextElement","updateComponent","prevElement","prevRenderedElement","nextRenderedElement","receiveComponent","unmountComponent","nextRenderedComponent","nextMarkup","replaceNode","_domNode","isDilithiumClass","component","node","performUpdateIfNecessary","instance","Object","assign","condition","Error","better","arg1","arg2","console","error","isValidElement","type","wrapperInstance","construct","_construct","constructTextComponent","config","children","childCount","arguments","length","Array","prototype","slice","call","typeofElement","typeofType","implementation","impl","empty","childNodes","forEach","removeChild","setProperty","attr","value","setAttribute","removeProperty","removeAttribute","updateStyles","styles","keys","style","appendChild","child","appendChildren","isArray","insertChildAfter","afterChild","insertBefore","nextSibling","firstChild","prevType","nextType","ROOT_KEY","rootID","instancesByRootID","isRoot","dataset","update","mount","renderedNode","id","MultiChild","el","_updateDOMProperties","_createInitialDOMChildren","unmountChildren","_updateDOMChildren","textContent","mountImages","mountChildren","prevProps","nextProps","updateChildren","styleUpdates","hasOwnProperty","prop","prevValue","nextValue","is","ChildReconciler","traverseAllChildren","UPDATE_TYPES","INSERT","MOVE","REMOVE","OPERATIONS","insert","afterNode","content","toIndex","_mountIndex","move","fromIndex","remove","fromNode","flattenChildren","flattenedChildren","context","name","processQueue","parentNode","updates","renderedChildren","instantiateChildren","_renderedChildren","map","childKey","i","nextChildren","prevRenderedChildren","removedNodes","nextRenderedChildren","lastIndex","nextMountIndex","lastPlacedNode","nextIndex","prevChild","nextChild","push","Math","max","instantiateChild","childInstances","isUnique","undefined","prevChildren","removedChildren","SEPARATOR","SUBSEPARATOR","getComponentKey","index","toString","callback","traverseContext","traverseAllChildrenImpl","nameSoFar","subTreeCount","nextNamePrefix","nextName"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0ce5aa6a6b9b6b82b415","'use strict';\n\nconst Dilithium = require('../dilithium');\n\nclass CounterButton extends Dilithium.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n    setInterval(() => {\n      // TODO: learn by debugger;\n      debugger\n      this.setState({count: this.state.count + 1});\n    }, 100);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        <ColorSwatch number={this.state.count} />\n        <div>Count: <span>{this.state.count}</span></div>\n      </div>\n    );\n  }\n}\n\nclass ColorSwatch extends Dilithium.Component {\n  render() {\n    const red = this.props.number * 10 % 256;\n    return (\n      <div\n        style={{\n          backgroundColor: `rgb(${red}, 0, ${red})`,\n          height: '50px',\n          width: '50px',\n        }}\n      />\n    );\n  }\n}\n\ndebugger\n// window.addEventListener('click', () => {\n  Dilithium.render(\n    <CounterButton title=\"Hello World\" />,\n    document.getElementById('container'),\n  );\n// });\n\n\n\n// WEBPACK FOOTER //\n// ./app.js","'use strict';\n\nvar Component = require('./src/Component');\nvar Element = require('./src/Element');\nvar Mount = require('./src/Mount');\n\n// Do dependency injection to work around circular dependencies\nvar DOMComponentWrapper = require('./src/DOMComponentWrapper');\nvar HostComponent = require('./src/HostComponent');\nHostComponent.inject(DOMComponentWrapper);\n\nmodule.exports = {\n  Component: Component,\n  createElement: Element.createElement,\n\n  render: Mount.render,\n  unmountComponentAtNode: Mount.unmountComponentAtNode,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/dilithium.js","'use strict';\n\nconst Reconciler = require('./Reconciler');\nconst UpdateQueue = require('./UpdateQueue');\nconst assert = require('./assert');\nconst instantiateComponent = require('./instantiateComponent');\nconst DOM = require('./DOM');\nconst shouldUpdateComponent = require('./shouldUpdateComponent');\n\nclass Component {\n  constructor(props) {\n    this.props = props;\n    this._currentElement = null;\n    this._pendingState = null;\n    this._renderedComponent = null;\n    this._renderedNode = null;\n\n    assert(typeof this.render === 'function');\n  }\n\n  // NOTE: sets `_pendingState` to the targeted state we want to get into\n  setState(partialState) {\n    // React uses a queue here to allow batching.\n    this._pendingState = partialState;\n    UpdateQueue.enqueueSetState(this, partialState);\n  }\n\n  // We have a helper method here to avoid having a wrapper instance.\n  // React does that - it's a smarter implementation and hides required helpers, internal data.\n  // That also allows renderers to have their own implementation specific wrappers.\n  // This ensures that React.Component is available across platforms.\n  _construct(element) {\n    this._currentElement = element;\n  }\n\n  mountComponent() {\n    // This is where the magic starts to happen. We call the render method to\n    // get our actual rendered element. Note: since we (and React) don't support\n    // Arrays or other types, we can safely assume we have an element.\n    let renderedElement = this.render();\n\n    // TODO: lifecycle methods: compnentWillMount\n\n    // Actually instantiate the rendered element.\n    let renderedComponent = instantiateComponent(renderedElement);\n\n    // NOTE: stores reference to the renderedComponent <could be DOMComponentWrapper>\n    this._renderedComponent = renderedComponent;\n\n    // Generate markup for the child & effectively recurse!\n    // Since CompositeComponents instances don't have a DOM representation of\n    // their own, this markup will actually be the DOM nodes (or Native Views)\n    let markup = Reconciler.mountComponent(renderedComponent);\n\n    // React doesn't store this reference, instead working through a shared\n    // interface for storing host nodes, allowing this to work across platforms.\n    // We'll take a shortcut.\n    // this._renderedNode = markup;\n\n    return markup;\n  }\n\n  receiveComponent(nextElement) {\n    this.updateComponent(this._currentElement, nextElement);\n  }\n\n  // NOTE: actually update of the component,\n  // NOTE:  @schema -> element: { type: function/string/we, props: {...} }\n  // NOTE:  @sequence ->\n  // NOTE:    componentWillReceiveProps > shouldComponentUpdate >\n  // NOTE:    componentWillUpdate > !?shouldUpdateComponent > Update\n  updateComponent(prevElement, nextElement) {\n    // NOTE: here (dilithium) its always true, b/c of `@performUpdateIfNecessary`\n    // This is a props updates due to a re-render from the parent.\n    if (prevElement !== nextElement) {\n      // React would call componentWillReceiveProps here\n    }\n\n    // React would call shouldComponentUpdate here and short circuit.\n    // let shouldUpdate = this.shouldComponentUpdate(nextElement.props, this._pendingState)\n\n    // React would call componentWillUpdate here\n\n    // NOTE: actually updating, setting `_currentElement`, `props`, `state`, unset `_pendigState`\n    // Update instance data\n    this._currentElement = nextElement;\n    this.props = nextElement.props;\n    this.state = this._pendingState;\n    this._pendingState = null;\n\n    // WARN: \"React has a wrapper instance, which complicates the logic\" how so?\n    // React has a wrapper instance, which complicates the logic. We'll do\n    // something simplified here.\n    // NOTE: maybe `@_renderedComponent` is the previous element, and will be set to `nextRenderedComponent` once this function completes\n    let prevRenderedElement = this._renderedComponent._currentElement;\n    let nextRenderedElement = this.render();\n\n    // NOTE: here in `shouldUpdateComponent` we are just briefly checking if the type of the element are same\n    // We check if we're going to update the existing rendered element or if\n    // we need to blow away the child tree and start over.\n    if (shouldUpdateComponent(prevRenderedElement, nextRenderedElement)) {\n      Reconciler.receiveComponent(this._renderedComponent, nextRenderedElement);\n    } else {\n      // Blow away and start over - it's similar to mounting.\n      // We don't actually need this logic for our example but we'll write it.\n      Reconciler.unmountComponent(this._renderedComponent);\n      let nextRenderedComponent = instantiateComponent(nextRenderedElement);\n      let nextMarkup = Reconciler.mountComponent(nextRenderedComponent);\n      // React defers to the host environment to keep this implementation agnostic.\n      // We'll just call directly.\n      DOM.replaceNode(this._renderedComponent._domNode, nextMarkup);\n      this._renderedComponent = nextRenderedComponent;\n    }\n  }\n\n  performUpdateIfNecessary() {\n    // React handles batching so could potentially have to handle a case of a\n    // state update or a new element being rendered. We just need to handle\n    // state updates.\n    this.updateComponent(this._currentElement, this._currentElement);\n  }\n\n  unmountComponent() {\n    if (!this._renderedComponent) {\n      return;\n    }\n\n    // TODO: call componentWillUnmount\n\n    Reconciler.unmountComponent(this._renderedComponent);\n\n    // TODO: reset fields so everything can get GCed appropriately\n  }\n}\n\n// Mark this class so we can easily differentiate from classes that don't extend\n// this base class.\nComponent.isDilithiumClass = true;\n\nmodule.exports = Component;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Component.js","'use strict';\n\nfunction mountComponent(component) {\n  // This will generate the DOM node that will go into the DOM. We defer to the\n  // component instance since it will contain the renderer specific implementation\n  // of what that means. This allows the Reconciler to be reused across DOM & Native.\n  let markup = component.mountComponent();\n\n  // React does more work here to ensure that refs work. We don't need to.\n  return markup;\n}\n\nfunction unmountComponent(component, node) {\n  // Again, React will do more work here to detach refs. We won't.\n  // We'll also continue deferring to the instance to do the real work.\n  component.unmountComponent();\n}\n\n// WARN: what are we saving!?\nfunction receiveComponent(component, element) {\n  // Shortcut! We won't do anythign if the next element is the same as the\n  // current one. This is unlikely in normal JSX usage, but it an optimization\n  // that can be unlocked with Babel's inline-element transform.\n  let prevElement = component._currentElement;\n  if (prevElement === element) {\n    return;\n  }\n\n  // Defer to the instance.\n  component.receiveComponent(element);\n}\n\n// NOTE: requested from UpdateQueue.enqueueSetState\nfunction performUpdateIfNecessary(component) {\n  component.performUpdateIfNecessary();\n}\n\nmodule.exports = {\n  mountComponent,\n  receiveComponent,\n  unmountComponent,\n  performUpdateIfNecessary,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Reconciler.js","'use strict';\n\nconst Reconciler = require('./Reconciler');\n\n// NOTE: @param {instance} - instance of {Component}\n// NOTE: @param {partialState} - targeted state we want to get into\n// NOTE: instead of triggering a batch update, this will just update the component\nfunction enqueueSetState(instance, partialState) {\n  // This is where React would do queueing, storing a series\n  // of partialStates. The Updater would apply those in a batch later.\n  // This is complicated so we won't do it today. Instead we'll update state\n  // and then tell the reconciler this component needs to be updated, synchronously.\n\n  // NOTE: create a new state and merge {old} and {target} states\n  instance._pendingState = Object.assign({}, instance.state, partialState);\n\n  Reconciler.performUpdateIfNecessary(instance);\n}\n\nmodule.exports = {\n  enqueueSetState,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/UpdateQueue.js","'use strict';\n\n// Lightweight replacement for invariant/node assert\n\nfunction assert(condition) {\n  if (!condition) {\n    throw new Error('assertion failure');\n  }\n}\n\n// BETTER: modified assert;\nassert.better = (arg1, arg2) => {\n  if (arg1 !== arg2) {\n    console.error(`inequal expressions given: 1. ${arg1}, 2. ${arg2}`)\n  }\n  assert(arg1 === arg2);\n}\nmodule.exports = assert\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/assert.js","'use strict';\n\nconst Element = require('./Element');\nconst assert = require('./assert');\nconst HostComponent = require('./HostComponent');\n\n// NOTE: @param {element} - { type, props ...}\n// NOTE: @returns {componentInstance} - wraps component in `wrapperInstance` and returns it\nfunction instantiateComponent(element) {\n  // ADDED: console.warn(element)\n  assert(Element.isValidElement(element));\n\n  let type = element.type;\n\n  let wrapperInstance;\n  if (typeof type === 'string') {\n    // NOTE: set as `DOMComponent` wrapper\n    wrapperInstance = HostComponent.construct(element);\n  } else if (typeof type === 'function') {\n    // NOTE: set as `CustomComponent` `ColorSwatch`\n    wrapperInstance = new element.type(element.props);\n    wrapperInstance._construct(element);\n  } else if (typeof element === 'string' || typeof element === 'number') {\n    wrapperInstance = HostComponent.constructTextComponent(element);\n  }\n\n  return wrapperInstance;\n\n  // If we have a string type, create a wrapper\n  // Otherwise we have a Component\n  // return new element.type(element.props)\n}\n\nmodule.exports = instantiateComponent;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/instantiateComponent.js","'use strict';\n\n// NOTE: @returns <Element> - { type, props }\nfunction createElement(type, config, children) {\n  // Clone the passed in config (props). In React we move some special\n  // props off of this object (keys, refs).\n  let props = Object.assign({}, config);\n\n  // WARN: confusing, this only checks if there is a third parameter passed in, if so, `childCount === 1`\n  // Build props.children. We'll make it an array if we have more than 1.\n  let childCount = arguments.length - 2;\n  if (childCount === 1) {\n    props.children = children;\n  } else if (childCount > 1) {\n    props.children = Array.prototype.slice.call(arguments, 2);\n  }\n\n  // React Features not supported:\n  // - keys\n  // - refs\n  // - defaultProps (usually set here)\n\n  return {\n    type,\n    props,\n  };\n}\n\nfunction isValidElement(element) {\n  let typeofElement = typeof element;\n  let typeofType = element.type && typeof element.type;\n  return (\n    typeofElement === 'string' ||\n    typeofElement === 'number' ||\n    typeofType === 'string' ||\n    (typeofType === 'function' && element.type.isDilithiumClass)\n  );\n}\n\nmodule.exports = {\n  createElement,\n  isValidElement,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Element.js","'use strict';\n\nconst assert = require('./assert');\n\nlet implementation;\n\nfunction construct(element) {\n  assert(implementation);\n\n  return new implementation(element);\n}\n\nfunction constructTextComponent(element) {\n  // Create wrapper element. It will just be a span.\n  return construct({\n    type: 'span',\n    props: {\n      children: element,\n    },\n  });\n}\n\nfunction inject(impl) {\n  implementation = impl;\n}\n\nmodule.exports = {\n  inject,\n  construct,\n  constructTextComponent,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/HostComponent.js","'use strict';\n\n// Remove all children from this node.\nfunction empty(node) {\n  [].slice.call(node.childNodes).forEach(node.removeChild, node);\n}\n\n// Very naive version of React's DOM property setting algorithm. Many\n// properties need to be updated differently.\nfunction setProperty(node, attr, value) {\n  // The DOM Component layer in this implementation isn't filtering so manually\n  // skip children here.\n  if (attr === 'children') {\n    return;\n  }\n\n  node.setAttribute(attr, value);\n}\n\n// Remove the property from the node.\nfunction removeProperty(node, attr) {\n  node.removeAttribute(attr);\n}\n\nfunction updateStyles(node, styles) {\n  Object.keys(styles).forEach(style => {\n    // TODO: Warn about improperly formatted styles (eg, contains hyphen)\n    // TODO: Warn about bad vendor prefixed styles\n    // TODO: Warn for invalid values (eg, contains semicolon)\n    // TODO: Handle shorthand property expansions (eg 'background')\n    // TODO: Auto-suffix some values with 'px'\n    node.style[style] = styles[style];\n  });\n}\n\nfunction appendChild(node, child) {\n  node.appendChild(child);\n}\n\nfunction appendChildren(node, children) {\n  if (Array.isArray(children)) {\n    children.forEach(child => appendChild(node, child));\n  } else {\n    appendChild(node, children);\n  }\n}\n\nfunction insertChildAfter(node, child, afterChild) {\n  node.insertBefore(\n    child,\n    afterChild ? afterChild.nextSibling : node.firstChild,\n  );\n}\n\nfunction removeChild(node, child) {\n  node.removeChild(child);\n}\n\nmodule.exports = {\n  setProperty,\n  removeProperty,\n  updateStyles,\n  empty,\n  appendChild,\n  appendChildren,\n  insertChildAfter,\n  removeChild,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/DOM.js","'use strict';\n// NOTE: @returns {boolean} - tells us whether the elements are of the same type, otherwise we might need a new component instead of an update\n// This determines if we're going to end up reusing an internal instance or not.\n// This is one of the big shortcuts that React does, stopping us from\n// instantiating and comparing full trees. Instead we immediately throw away\n// a subtree when updating from one element type to another.\nfunction shouldUpdateComponent(prevElement, nextElement) {\n  let prevType = typeof prevElement;\n  let nextType = typeof nextElement;\n\n  // Quickly allow strings.\n  if (prevType === 'string') {\n    return nextType === 'string';\n  }\n\n  // Otherwise look at element.type. In React we would also look at the key.\n  return prevElement.type === nextElement.type;\n}\n\nmodule.exports = shouldUpdateComponent;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/shouldUpdateComponent.js","'use strict';\n\nconst Element = require('./Element');\nconst assert = require('./assert');\nconst DOM = require('./DOM');\nconst shouldUpdateComponent = require('./shouldUpdateComponent');\nconst instantiateComponent = require('./instantiateComponent');\nconst Reconciler = require('./Reconciler');\n\nconst ROOT_KEY = 'dlthmRootId';\nlet rootID = 1;\n\n// Used to track root instances.\nconst instancesByRootID = {}; // exported for testing\n\n// NOTE: checks if we this node is already rendered as root\nfunction isRoot(node) {\n  if (node.dataset[ROOT_KEY]) {\n    return true;\n  }\n  return false;\n}\n\nfunction render(element, node) {\n  // TODO: learn render debugger\n  assert(Element.isValidElement(element));\n\n  // First check if we've already rendered into this node.\n  // If so, we'll be doing an update.\n  // Otherwise we'll assume this is an initial render.\n  if (isRoot(node)) {\n    update(element, node);\n  } else {\n    mount(element, node);\n  }\n}\n\nfunction mount(element, node) {\n  // NOTE: ?! what is this doing? `dataset`: sets data-dlthm-root-id=\"1\" by using DOMNode.dataset api\n  // Mark this node as a root.\n  node.dataset[ROOT_KEY] = rootID;\n\n  // Create the internal instance. We're assuming for now that we only have\n  // `Component`s being rendered at the root.\n  let component = instantiateComponent(element);\n\n  // NOTE: stores the component or <wrapperInstance>\n  instancesByRootID[rootID] = component;\n\n  // This will return a DOM node. React does more work here to determine if we're remounting\n  // server-rendered content.\n  let renderedNode = Reconciler.mountComponent(component, node);\n\n  // Empty out `node` so we can put it under our control.\n  DOM.empty(node);\n\n  DOM.appendChild(node, renderedNode);\n\n  // Incrememnt rootID so we can track appropriately.\n  rootID++;\n}\n\nfunction update(element, node) {\n  // Ensure we have a valid root node\n  assert(node && isRoot(node));\n\n  // Find the internal instance and update it\n  let id = node.dataset[ROOT_KEY];\n\n  let instance = instancesByRootID[id];\n\n  if (shouldUpdateComponent(instance, element)) {\n    // TODO: do the update\n  } else {\n    // Unmount and then mount the new one\n    unmountComponentAtNode(node);\n    mount(element, node);\n  }\n\n  // TODO: update\n}\n\nfunction unmountComponentAtNode(node) {\n  // Ensure we have a valid root node\n  assert(node && isRoot(node));\n\n  let id = node.dataset[ROOT_KEY];\n\n  // In React we would do a batch unmount operation. This would in turn call\n  // componentWillUnmount for each instance. We aren't going to support that,\n  // so we can just delete the top level instance and let everything get garbage\n  // collected.\n  let instance = instancesByRootID[id];\n  Reconciler.unmountComponent(instance);\n\n  delete instancesByRootID[id];\n\n  // Reset the DOM node\n  DOM.empty(node);\n  delete node.dataset[ROOT_KEY];\n}\n\nmodule.exports = {\n  render,\n  unmountComponentAtNode,\n\n  // NOTE: export for testing purposes\n  ROOT_KEY,\n  instancesByRootID\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Mount.js","'use strict';\n\nconst MultiChild = require('./MultiChild');\nconst DOM = require('./DOM');\nconst assert = require('./assert');\n\nclass DOMComponentWrapper extends MultiChild {\n  // NOTE: - params { object } - { type: <String, Component subclass>, props: <Object>\n  constructor(element) {\n    super();\n    this._currentElement = element;\n    this._domNode = null;\n  }\n\n  mountComponent() {\n    // TODO: special handling for various element types\n    // TODO: determine namespace DOM element should be created in (eg svg)\n    // TODO: validate DOM nesting for helpful warnings\n    // TODO: even more specifically handle <script> tags so code doesn't run\n    // TODO: custom elements need to be created slightly differently\n\n    // Create the DOM element\n    let el = document.createElement(this._currentElement.type);\n\n    this._domNode = el;\n\n    this._updateDOMProperties({}, this._currentElement.props);\n\n    // BETTER: only pass in `this._currentElement.props.children`\n    this._createInitialDOMChildren(this._currentElement.props);\n\n    return el;\n  }\n\n  unmountComponent() {\n    // React needs to do some special handling for some node types, specifically\n    // removing event handlers that had to be attached to this node and couldn't\n    // be handled through propagation.\n    this.unmountChildren();\n  }\n\n  receiveComponent(nextElement) {\n    this.updateComponent(this._currentElement, nextElement);\n  }\n\n  updateComponent(prevElement, nextElement) {\n    // debugger;\n    this._currentElement = nextElement;\n    this._updateDOMProperties(prevElement.props, nextElement.props);\n    this._updateDOMChildren(prevElement.props, nextElement.props);\n  }\n\n  _createInitialDOMChildren(props) {\n    // Text content\n    if (\n      typeof props.children === 'string' ||\n      typeof props.children === 'number'\n    ) {\n      // TODO: validate element type can have text children\n      // TODO: wrap with helper, there are browser inconsistencies\n      this._domNode.textContent = props.children;\n    } else if (props.children) {\n      // Single element or Array\n      let mountImages = this.mountChildren(props.children);\n      DOM.appendChildren(this._domNode, mountImages);\n    }\n  }\n\n  _updateDOMChildren(prevProps, nextProps) {\n    // React does a bunch of work to handle dangerouslySetInnerHTML.\n    // React also handles switching between text children and more DOM nodes.\n    // We will simply assert if we are toggling.\n    let prevType = typeof prevProps.children;\n    let nextType = typeof nextProps.children;\n    assert(prevType === nextType);\n\n    // Childless node, skip\n    if (nextType === 'undefined') {\n      return;\n    }\n    // NOTE: Core, everything above are precondition checks\n    // Much like the initial step, handline text differently than elements.\n    if (nextType === 'string' || nextType === 'number') {\n      this._domNode.textContent = nextProps.children;\n    } else {\n      this.updateChildren(nextProps.children);\n    }\n  }\n\n  // NOTE: handles updating(by that it means removing and adding) DOM props\n  _updateDOMProperties(prevProps, nextProps) {\n    let styleUpdates = {};\n\n    // Loop over previous props so we know what we need to remove\n    Object.keys(prevProps).forEach(prop => {\n      // We're updating or adding a value, which we'll catch in the next loop so\n      // we can skip here. That means the only props remaining will be removals.\n      if (nextProps.hasOwnProperty(prop) || prevProps[prop] == null) {\n        // NOTE: if nextProp has the said prop (hence it must be updating the value) OR if this prop is null/undefined previously.\n        return;\n      }\n\n      // NOTE: ?! how do you know there are NO new ones, (seems like you are just readding them later)\n      // Unset all previous styles since we know there are no new ones.\n      if (prop === 'style') {\n        Object.keys(prevProps[prop]).forEach(style => {\n          styleUpdates[style] = '';\n        });\n      } else {\n        // Handle propery removals. In React we currently have a white list of known\n        // properties, which allows us to special case some things like \"checked\".\n        // We'll just remove blindly.\n        DOM.removeProperty(this._domNode, prop);\n      }\n    });\n\n    // Handle updates / additions\n    Object.keys(nextProps).forEach(prop => {\n      let prevValue = prevProps[prop];\n      let nextValue = nextProps[prop];\n\n      // Don't do anything if we have identical values.\n      if (Object.is(prevValue, nextValue)) {\n        return;\n      }\n\n      if (prop === 'style') {\n        // Update carefully. We need to remove old styles and add new ones\n        if (prevValue) {\n          // NOTE: remove if `nextValue.false?` (is actually `nextStyle`) or next value didn't specify the current `styleAttr`\n          Object.keys(prevValue).forEach(style => {\n            if (!nextValue || !nextValue.hasOwnProperty(style)) {\n              styleUpdates[style] = '';\n            }\n          });\n          // NOTE: replace if different\n          Object.keys(nextValue).forEach(style => {\n            if (prevValue[style] !== nextValue[style]) {\n              styleUpdates[style] = nextValue[style];\n            }\n          });\n        } else {\n          // If there was no previous style, we can just treat the new style as the update.\n          styleUpdates = nextValue;\n        }\n      } else {\n        // DOM updates\n        DOM.setProperty(this._domNode, prop, nextValue);\n      }\n\n      DOM.updateStyles(this._domNode, styleUpdates);\n    });\n  }\n}\n\nmodule.exports = DOMComponentWrapper;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/DOMComponentWrapper.js","'use strict';\n\nconst Reconciler = require('./Reconciler');\nconst ChildReconciler = require('./ChildReconciler');\nconst traverseAllChildren = require('./traverseAllChildren');\n\nconst DOM = require('./DOM');\n\nconst UPDATE_TYPES = {\n  INSERT: 1,\n  MOVE: 2,\n  REMOVE: 3,\n};\n\n// NOTE: returns action-like objects. `type` defines the action name\nconst OPERATIONS = {\n  insert(component, node, afterNode) {\n    return {\n      type: UPDATE_TYPES.INSERT,\n      content: node,\n      toIndex: component._mountIndex,\n      afterNode: afterNode,\n    };\n  },\n\n  move(component, afterNode, toIndex) {\n    return {\n      type: UPDATE_TYPES.MOVE,\n      fromIndex: component._mountIndex,\n      toIndex: toIndex,\n      afterNode: afterNode,\n    };\n  },\n\n  remove(component, node) {\n    return {\n      type: UPDATE_TYPES.REMOVE,\n      fromIndex: component._mountIndex,\n      fromNode: node,\n    };\n  },\n};\n\n// NOTE: gets all children into a flattened context:\n// NOTE:   { .0.0: element1, .1.0: element2 }\nfunction flattenChildren(children) {\n  let flattenedChildren = {};\n  traverseAllChildren(\n    children,\n    (context, child, name) => (context[name] = child),\n    flattenedChildren,\n  );\n\n  return flattenedChildren;\n}\n\n// WARN: what is react doing!?\n// In React we do this in an injection point, allowing MultiChild to be used\n// across renderers. We don't do that here to reduce overhead.\n// NOTE: actually processing `OPERATION` objects\nfunction processQueue(parentNode, updates) {\n  updates.forEach(update => {\n    switch (update.type) {\n      case UPDATE_TYPES.INSERT:\n        DOM.insertChildAfter(parentNode, update.content, update.afterNode);\n        break;\n\n      case UPDATE_TYPES.MOVE:\n        DOM.insertChildAfter(\n          parentNode,\n          parentNode.childNodes[fromIndex],\n          update.afterNode,\n        );\n        break;\n\n      case UPDATE_TYPES.REMOVE:\n        DOM.removeChild(parentNode, update.fromNode);\n        break;\n\n      default:\n        assert(false);\n    }\n  });\n}\n\nclass MultiChild {\n  mountChildren(children) {\n    // Instantiate all of the actual child instances into a flat object. This\n    // handles all of the complicated logic around flattening subarrays.\n    let renderedChildren = ChildReconciler.instantiateChildren(children);\n\n    /*\n    {\n      '.0.0': {_currentElement, ...}\n      '.0.1': {_currentElement, ...}\n    }\n    */\n\n    // Store the reference, we'll need this when updating.\n    this._renderedChildren = renderedChildren;\n\n    // We'll turn that renderedChildren object into a flat array and recurse,\n    // mounting their children.\n    let mountImages = Object.keys(renderedChildren).map((childKey, i) => {\n      let child = renderedChildren[childKey];\n\n      child._mountIndex = i;\n\n      return Reconciler.mountComponent(child);\n    });\n\n    return mountImages;\n  }\n\n  unmountChildren() {\n    ChildReconciler.unmountChildren(this._renderedChildren);\n  }\n\n  // NOTE: @params - [<Element>]\n  updateChildren(nextChildren) {\n    // NOTE: this is previously rendered[<Components>]\n    let prevRenderedChildren = this._renderedChildren;\n\n    let mountImages = [];\n    let removedNodes = {};\n\n    let nextRenderedChildren = flattenChildren(nextChildren);\n\n    // NOTE: updates `removedNodes` so that we can remove these later.\n    ChildReconciler.updateChildren(\n      prevRenderedChildren,\n      nextRenderedChildren,\n      mountImages,\n      removedNodes,\n    );\n\n    // The following is the bread & butter of React. We'll compare the current\n    // set of children to the next set.\n    // We need to determine what nodes are being moved around, which are being\n    // inserted, and which are getting removed. Luckily, the removal list was\n    // already determined by the ChildReconciler.\n\n    // WARN: bookmark\n    // We'll store a serious of update operations here.\n    let updates = [];\n\n    let lastIndex = 0;\n    let nextMountIndex = 0;\n    let lastPlacedNode = null;\n\n    Object.keys(nextRenderedChildren).forEach((childKey, nextIndex) => {\n      let prevChild = prevRenderedChildren[childKey];\n      let nextChild = nextRenderedChildren[childKey];\n\n      // If the are identical, record this as an update. We might have inserted\n      // or removed nodes.\n      // NOTE: component vs component comparison\n      if (prevChild === nextChild) {\n        // WARN: not understanding what this `move` OPERATION is doing (shouldn't this be an update if its same component?), defering to place wehre `updates`<Array> is being consumed\n        // We don't actually need to move if moving to a lower index. Other\n        // operations will ensure the end result is correct.\n        if (prevChild._mountIndex < lastIndex) {\n          updates.push(OPERATIONS.move(prevChild, lastPlacedNode, nextIndex));\n        }\n        lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        prevChild._mountIndex = nextIndex;\n      } else {\n        // Otherwise we need to record an insertion. Removals will be handled below\n        // First, if we have a prevChild then we know it's a removal.\n        // We want to update lastIndex based on that.\n        if (prevChild) {\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        }\n\n        nextChild._mountIndex = nextIndex;\n        updates.push(\n          OPERATIONS.insert(\n            nextChild,\n            mountImages[nextMountIndex],\n            lastPlacedNode,\n          ),\n        );\n        nextMountIndex++;\n      }\n\n      // NOTE: used as `afterNode` by `OPERATIONS`, not sure what this keep track is accomplishing other than maybe order\n      lastPlacedNode = nextChild._domNode;\n    });\n\n    // Enqueue removals\n    Object.keys(removedNodes).forEach(childKey => {\n      updates.push(\n        OPERATIONS.remove(\n          prevRenderedChildren[childKey],\n          removedNodes[childKey],\n        ),\n      );\n    });\n\n    // NOTE: updates is a list of `OPERATIONS`\n    processQueue(this._domNode, updates);\n\n    this._renderedChildren = nextRenderedChildren;\n  }\n}\n\nmodule.exports = MultiChild;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/MultiChild.js","'use strict';\n\nconst instantiateComponent = require('./instantiateComponent');\nconst traverseAllChildren = require('./traverseAllChildren');\nconst shouldUpdateComponent = require('./shouldUpdateComponent');\n\nconst Reconciler = require('./Reconciler');\n\n// This *right here* is why keys are critical to preventing reordering issues.\n// React will reuse an existing instance if there is one in this subtree.\n// The instance identity here is determined by the generated key based on\n// depth in the tree, parent, and (in React) the key={} prop.\nfunction instantiateChild(childInstances, child, name) {\n  let isUnique = childInstances[name] === undefined;\n\n  if (isUnique) {\n    childInstances[name] = instantiateComponent(child);\n  }\n}\n\nfunction instantiateChildren(children) {\n  // We store the child instances here, which are in turn used passed to\n  // instantiateChild. We'll store this object for reuse when doing updates.\n  let childInstances = {};\n\n  traverseAllChildren(children, instantiateChild, childInstances);\n\n  return childInstances;\n}\n\n// NOTE: updateChildren compares prevChildren and nextChildren and update the component or removes it\n// WARN: not fully understood, will comeback\nfunction updateChildren(\n  prevChildren, // TODO: Instances of Components, as created above\n  nextChildren, // TODO: Actually elements, should be called nextChildElements\n  mountImages,\n  removedChildren,\n) {\n  // Just make our code a little bit cleaner so we don't have to do null checks.\n  // React skips this to avoid extraneous objects.\n  prevChildren = prevChildren || {};\n\n  // NOTE: below\n  // Loop over our new children and determine what is being updated, removed,\n  // and created.\n  Object.keys(nextChildren).forEach(childKey => {\n    // NOTE: grabs { prevComponent, prevElement, and nextElement} respectively\n    let prevChild = prevChildren[childKey];\n    let prevElement = prevChild && prevChild._currentElement;\n    let nextElement = nextChildren[childKey];\n\n    // Update\n    if (prevChild && shouldUpdateComponent(prevElement, nextElement)) {\n      // Update the existing child with the reconciler. This will recurse\n      // through that component's subtree.\n      Reconciler.receiveComponent(prevChild, nextElement);\n\n      // We no longer need the new instance, so replace it with the old one.\n      nextChildren[childKey] = prevChild;\n    } else {\n      // Otherwise\n      // Remove the old child. We're replacing.\n      if (prevChild) {\n        // TODO: make this work for composites\n        removedChildren[childKey] = prevChild._domNode;\n        Reconciler.unmountComponent(prevChild);\n      }\n\n      // Instantiate the new child.\n      let nextChild = instantiateComponent(nextElement);\n      nextChildren[childKey] = nextChild;\n\n      // React does this here so that refs resolve in the correct order.\n      mountImages.push(Reconciler.mountComponent(nextChild));\n    }\n  });\n\n  // NOTE: below\n  // Last but not least, remove the old children which no longer have any presense.\n  Object.keys(prevChildren).forEach(childKey => {\n    // debugger;\n    // NOTE: if nextChildren has no such childKey from prevChildren (meaning if its removed), set the domNode onto `removedChildren` removedChildren['0.1']` and unmount the prevChild <Component>\n    if (!nextChildren.hasOwnProperty(childKey)) {\n      prevChild = prevChildren[childKey];\n      removedChildren[childKey] = prevChild._domNode;\n      Reconciler.unmountComponent(prevChild);\n    }\n  });\n}\n\nfunction unmountChildren(renderedChildren) {\n  if (!renderedChildren) {\n    return;\n  }\n  Object.keys(renderedChildren).forEach(childKey => {\n    Reconciler.unmountComponent(renderedChildren[childKey]);\n  });\n}\n\nmodule.exports = {\n  instantiateChildren,\n  updateChildren,\n  unmountChildren,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/ChildReconciler.js","'use strict';\n\nconst SEPARATOR = '.';\nconst SUBSEPARATOR = ':';\n\nfunction getComponentKey(component, index) {\n  // This is where we would use the key prop to generate a unique id that\n  // persists across moves. However we're skipping that so we'll just use the\n  // index.\n\n  // We'll convert this to base 36 for compactness.\n  return index.toString(36);\n}\n\n// NOTE: @returns <Integer> !? count of all children?\n// NOTE: @side_effect - mutate `traverseContext` to contain key-value pairs of all children, e.g.\n// NOTE:    { .0.0: DOMComponentWrapper, .1.0: ColorSwatch, ... }\nfunction traverseAllChildren(children, callback, traverseContext) {\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\n// NOTE: @param `nameSoFar` - adds levels of separator\n// NOTE:   lifecycle: [\n// NOTE:      '.',\n// NOTE:      '.2', // passed into recursion*\n// NOTE:      '.2:'\n// NOTE:      '.2:1' //  passed into next recursion\n// NOTE:    ]\n// NOTE: @param `callback` - `ChildReconciler.instantiateChild`, which invokes `initiateComponent`\n// NOTE: @param `traverseContext` - understood as `childInstances` to keep track of children throughout the recursion. This is used to prevent\n// NOTE:    reorder issues, b/c React will reuse an existing instance (found in traverseContext) if there is one in the subtree.\n// NOTE:    builds something like this, {.0.0: DOMComponentWrapper, .1.0: ColorSwatch, .2.0: DOMComponentWrapper}\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  callback,\n  traverseContext,\n) {\n  // TODO: support null, undefined, booleans, numbers, iterators\n\n  // NOTE: if theres only one child and its not Array, call `callback`, could be `instantiateChild(childInstances, child, name)`, and end\n  // Handle a single child.\n  if (typeof children === 'string' || !Array.isArray(children)) {\n    // We'll treat this name as if it were a lone item in an array, as going from\n    // a single child to an array is fairly common.\n\n    // This callback gets called with traverseContext as an argument. This is\n    // passed in from the reconciler and it used there to track the children.\n    // NOTE: tracks the level of scoping for each traverse, through recursively invoking `traverseAllChildrenImpl` on each child\n    callback(\n      traverseContext,\n      children,\n      nameSoFar + SEPARATOR + getComponentKey(children, 0),\n    );\n    return 1;\n  }\n\n  // WARN: ?! whats there to support about iterators? maybe ES6 iterators?\n  // WARN: ?! when would children be nested?, maybe when it returns an array? <div>{[<div>123</div>]}</div>\n  // NOTE: `subTreeCount` keeps track of number of children.\n  // Otherwise we have an array. React also supports iterators but we won't.\n  // We need to return the number of children so start tracking that.\n  // Note that this isn't simply children.length - since children can contain nested\n  // arrays, we need to account for that too, as those are rendered at the same level.\n  let subTreeCount = 0;\n  let nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  // Loop over all children, generate the next key prefix, and then recurse!\n  children.forEach((child, i) => {\n    let nextName = nextNamePrefix + getComponentKey(child, i);\n    subTreeCount += traverseAllChildrenImpl(\n      child,\n      nextName,\n      callback,\n      traverseContext,\n    );\n  });\n\n  return subTreeCount;\n}\n\nmodule.exports = traverseAllChildren;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/traverseAllChildren.js"],"sourceRoot":""}