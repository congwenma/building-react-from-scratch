{"version":3,"sources":["webpack:///webpack/bootstrap 2305780450bdd723e5bd","webpack:///./app.js","webpack:///../dilithium/dilithium.js","webpack:///../dilithium/src/Component.js","webpack:///../dilithium/src/Reconciler.js","webpack:///../dilithium/src/UpdateQueue.js","webpack:///../dilithium/src/assert.js","webpack:///../dilithium/src/instantiateComponent.js","webpack:///../dilithium/src/Element.js","webpack:///../dilithium/src/HostComponent.js","webpack:///../dilithium/src/DOM.js","webpack:///../dilithium/src/shouldUpdateComponent.js","webpack:///../dilithium/src/Mount.js","webpack:///../dilithium/src/DOMComponentWrapper.js","webpack:///../dilithium/src/MultiChild.js","webpack:///../dilithium/src/ChildReconciler.js","webpack:///../dilithium/src/traverseAllChildren.js"],"names":["Dilithium","require","CounterButton","Component","constructor","props","state","count","setInterval","setState","render","title","ColorSwatch","red","number","backgroundColor","height","width","document","getElementById","Element","Mount","DOMComponentWrapper","HostComponent","inject","module","exports","createElement","unmountComponentAtNode","Reconciler","UpdateQueue","assert","instantiateComponent","DOM","shouldUpdateComponent","_currentElement","_pendingState","_renderedComponent","_renderedNode","partialState","enqueueSetState","_construct","element","mountComponent","renderedElement","renderedComponent","markup","receiveComponent","nextElement","updateComponent","prevElement","prevRenderedElement","nextRenderedElement","unmountComponent","nextRenderedComponent","nextMarkup","replaceNode","_domNode","performUpdateIfNecessary","isDilithiumClass","component","node","instance","Object","assign","condition","Error","isValidElement","type","wrapperInstance","construct","constructTextComponent","config","children","childCount","arguments","length","Array","prototype","slice","call","typeofElement","typeofType","implementation","impl","empty","childNodes","forEach","removeChild","setProperty","attr","value","setAttribute","removeProperty","removeAttribute","updateStyles","styles","keys","style","appendChild","child","appendChildren","isArray","insertChildAfter","afterChild","insertBefore","nextSibling","firstChild","prevType","nextType","ROOT_KEY","rootID","instancesByRootID","isRoot","dataset","update","mount","renderedNode","id","MultiChild","el","_updateDOMProperties","_createInitialDOMChildren","unmountChildren","_updateDOMChildren","textContent","mountImages","mountChildren","prevProps","nextProps","updateChildren","styleUpdates","prop","hasOwnProperty","prevValue","nextValue","is","ChildReconciler","traverseAllChildren","UPDATE_TYPES","INSERT","MOVE","REMOVE","OPERATIONS","insert","afterNode","content","toIndex","_mountIndex","move","fromIndex","remove","fromNode","flattenChildren","flattenedChildren","context","name","processQueue","parentNode","updates","renderedChildren","instantiateChildren","_renderedChildren","map","childKey","i","nextChildren","prevRenderedChildren","removedNodes","nextRenderedChildren","lastIndex","nextMountIndex","lastPlacedNode","nextIndex","prevChild","nextChild","push","Math","max","instantiateChild","childInstances","isUnique","undefined","prevChildren","removedChildren","SEPARATOR","SUBSEPARATOR","getComponentKey","index","toString","callback","traverseContext","traverseAllChildrenImpl","nameSoFar","subTreeCount","nextNamePrefix","nextName"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2305780450bdd723e5bd","'use strict';\n\nconst Dilithium = require('../dilithium');\n\nclass CounterButton extends Dilithium.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n    setInterval(() => {\n      // TODO: learn by debugger;\n      this.setState({count: this.state.count + 1});\n    }, 100);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        <ColorSwatch number={this.state.count} />\n        <div>Count: <span>{this.state.count}</span></div>\n      </div>\n    );\n  }\n}\n\nclass ColorSwatch extends Dilithium.Component {\n  render() {\n    const red = this.props.number * 10 % 256;\n    return (\n      <div\n        style={{\n          backgroundColor: `rgb(${red}, 0, ${red})`,\n          height: '50px',\n          width: '50px',\n        }}\n      />\n    );\n  }\n}\n\n// window.addEventListener('click', () => {\n  Dilithium.render(\n    <CounterButton title=\"Hello World\" />,\n    document.getElementById('container'),\n  );\n// });\n\n\n\n// WEBPACK FOOTER //\n// ./app.js","'use strict';\n\nvar Component = require('./src/Component');\nvar Element = require('./src/Element');\nvar Mount = require('./src/Mount');\n\n// Do dependency injection to work around circular dependencies\nvar DOMComponentWrapper = require('./src/DOMComponentWrapper');\nvar HostComponent = require('./src/HostComponent');\nHostComponent.inject(DOMComponentWrapper);\n\nmodule.exports = {\n  Component: Component,\n  createElement: Element.createElement,\n\n  render: Mount.render,\n  unmountComponentAtNode: Mount.unmountComponentAtNode,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/dilithium.js","'use strict';\n\nconst Reconciler = require('./Reconciler');\nconst UpdateQueue = require('./UpdateQueue');\nconst assert = require('./assert');\nconst instantiateComponent = require('./instantiateComponent');\nconst DOM = require('./DOM');\nconst shouldUpdateComponent = require('./shouldUpdateComponent');\n\nclass Component {\n  constructor(props) {\n    this.props = props;\n    this._currentElement = null;\n    this._pendingState = null;\n    this._renderedComponent = null;\n    this._renderedNode = null;\n\n    assert(typeof this.render === 'function');\n  }\n\n  // NOTE: sets `_pendingState` to the targeted state we want to get into\n  setState(partialState) {\n    // React uses a queue here to allow batching.\n    this._pendingState = partialState;\n    UpdateQueue.enqueueSetState(this, partialState);\n  }\n\n  // We have a helper method here to avoid having a wrapper instance.\n  // React does that - it's a smarter implementation and hides required helpers, internal data.\n  // That also allows renderers to have their own implementation specific wrappers.\n  // This ensures that React.Component is available across platforms.\n  _construct(element) {\n    this._currentElement = element;\n  }\n\n  mountComponent() {\n    // This is where the magic starts to happen. We call the render method to\n    // get our actual rendered element. Note: since we (and React) don't support\n    // Arrays or other types, we can safely assume we have an element.\n    let renderedElement = this.render();\n\n    // TODO: lifecycle methods: compnentWillMount\n\n    // Actually instantiate the rendered element.\n    let renderedComponent = instantiateComponent(renderedElement);\n\n    // NOTE: stores reference to the renderedComponent <could be DOMComponentWrapper>\n    this._renderedComponent = renderedComponent;\n\n    // Generate markup for the child & effectively recurse!\n    // Since CompositeComponents instances don't have a DOM representation of\n    // their own, this markup will actually be the DOM nodes (or Native Views)\n    let markup = Reconciler.mountComponent(renderedComponent);\n\n    // React doesn't store this reference, instead working through a shared\n    // interface for storing host nodes, allowing this to work across platforms.\n    // We'll take a shortcut.\n    // this._renderedNode = markup;\n\n    return markup;\n  }\n\n  receiveComponent(nextElement) {\n    this.updateComponent(this._currentElement, nextElement);\n  }\n\n  // NOTE: actually update of the component,\n  // NOTE:  @schema -> element: { type: function/string/we, props: {...} }\n  // NOTE:  @sequence ->\n  // NOTE:    componentWillReceiveProps > shouldComponentUpdate >\n  // NOTE:    componentWillUpdate > !?shouldUpdateComponent > Update\n  updateComponent(prevElement, nextElement) {\n    // NOTE: here (dilithium) its always true, b/c of `@performUpdateIfNecessary`\n    // This is a props updates due to a re-render from the parent.\n    if (prevElement !== nextElement) {\n      // React would call componentWillReceiveProps here\n    }\n\n    // React would call shouldComponentUpdate here and short circuit.\n    // let shouldUpdate = this.shouldComponentUpdate(nextElement.props, this._pendingState)\n\n    // React would call componentWillUpdate here\n\n    // NOTE: actually updating, setting `_currentElement`, `props`, `state`, unset `_pendingState`\n    // Update instance data\n    this._currentElement = nextElement;\n    this.props = nextElement.props;\n    this.state = this._pendingState;\n    this._pendingState = null;\n\n    // WARN: \"React has a wrapper instance, which complicates the logic\" how so?\n    // React has a wrapper instance, which complicates the logic. We'll do\n    // something simplified here.\n    // NOTE: maybe `@_renderedComponent` is the previous element, and will be set to `nextRenderedComponent` once this function completes\n    let prevRenderedElement = this._renderedComponent._currentElement;\n    let nextRenderedElement = this.render();\n\n    // NOTE: here in `shouldUpdateComponent` we are just briefly checking if the type of the element are same\n    // We check if we're going to update the existing rendered element or if\n    // we need to blow away the child tree and start over.\n    if (shouldUpdateComponent(prevRenderedElement, nextRenderedElement)) {\n      Reconciler.receiveComponent(this._renderedComponent, nextRenderedElement);\n    } else {\n      // Blow away and start over - it's similar to mounting.\n      // We don't actually need this logic for our example but we'll write it.\n      Reconciler.unmountComponent(this._renderedComponent);\n      let nextRenderedComponent = instantiateComponent(nextRenderedElement);\n      let nextMarkup = Reconciler.mountComponent(nextRenderedComponent);\n      // React defers to the host environment to keep this implementation agnostic.\n      // We'll just call directly.\n      DOM.replaceNode(this._renderedComponent._domNode, nextMarkup);\n      this._renderedComponent = nextRenderedComponent;\n    }\n  }\n\n  performUpdateIfNecessary() {\n    // React handles batching so could potentially have to handle a case of a\n    // state update or a new element being rendered. We just need to handle\n    // state updates.\n    this.updateComponent(this._currentElement, this._currentElement);\n  }\n\n  unmountComponent() {\n    if (!this._renderedComponent) {\n      return;\n    }\n\n    // TODO: call componentWillUnmount\n\n    Reconciler.unmountComponent(this._renderedComponent);\n\n    // TODO: reset fields so everything can get GCed appropriately\n  }\n}\n\n// Mark this class so we can easily differentiate from classes that don't extend\n// this base class.\nComponent.isDilithiumClass = true;\n\nmodule.exports = Component;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Component.js","'use strict';\n\nfunction mountComponent(component) {\n  // This will generate the DOM node that will go into the DOM. We defer to the\n  // component instance since it will contain the renderer specific implementation\n  // of what that means. This allows the Reconciler to be reused across DOM & Native.\n  let markup = component.mountComponent();\n\n  // React does more work here to ensure that refs work. We don't need to.\n  return markup;\n}\n\nfunction unmountComponent(component, node) {\n  // Again, React will do more work here to detach refs. We won't.\n  // We'll also continue deferring to the instance to do the real work.\n  component.unmountComponent();\n}\n\n// WARN: what are we saving!?\nfunction receiveComponent(component, element) {\n  // Shortcut! We won't do anythign if the next element is the same as the\n  // current one. This is unlikely in normal JSX usage, but it an optimization\n  // that can be unlocked with Babel's inline-element transform.\n  let prevElement = component._currentElement;\n  if (prevElement === element) {\n    return;\n  }\n\n  // Defer to the instance.\n  component.receiveComponent(element);\n}\n\n// NOTE: requested from UpdateQueue.enqueueSetState\nfunction performUpdateIfNecessary(component) {\n  component.performUpdateIfNecessary();\n}\n\nmodule.exports = {\n  mountComponent,\n  receiveComponent,\n  unmountComponent,\n  performUpdateIfNecessary,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Reconciler.js","'use strict';\n\nconst Reconciler = require('./Reconciler');\n\n// NOTE: @param {instance} - instance of {Component}\n// NOTE: @param {partialState} - targeted state we want to get into\n// NOTE: instead of triggering a batch update, this will just update the component\nfunction enqueueSetState(instance, partialState) {\n  // This is where React would do queueing, storing a series\n  // of partialStates. The Updater would apply those in a batch later.\n  // This is complicated so we won't do it today. Instead we'll update state\n  // and then tell the reconciler this component needs to be updated, synchronously.\n\n  // NOTE: create a new state and merge {old} and {target} states\n  instance._pendingState = Object.assign({}, instance.state, partialState);\n\n  Reconciler.performUpdateIfNecessary(instance);\n}\n\nmodule.exports = {\n  enqueueSetState,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/UpdateQueue.js","'use strict';\n\n// Lightweight replacement for invariant/node assert\n\nmodule.exports = function assert(condition) {\n  if (!condition) {\n    throw new Error('assertion failure');\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/assert.js","'use strict';\n\nconst Element = require('./Element');\nconst assert = require('./assert');\nconst HostComponent = require('./HostComponent');\n\n// construct the component and wraps it in `wrapperInstance` and returns it\nfunction instantiateComponent(element) {\n  assert(Element.isValidElement(element));\n\n  let type = element.type;\n\n  let wrapperInstance;\n  if (typeof type === 'string') {\n    // NOTE: set as `DOMComponent` wrapper\n    wrapperInstance = HostComponent.construct(element);\n  } else if (typeof type === 'function') {\n    // NOTE: set as `CustomComponent` `ColorSwatch`\n    wrapperInstance = new element.type(element.props);\n    wrapperInstance._construct(element);\n  } else if (typeof element === 'string' || typeof element === 'number') {\n    wrapperInstance = HostComponent.constructTextComponent(element);\n  }\n\n  return wrapperInstance;\n\n  // If we have a string type, create a wrapper\n  // Otherwise we have a Component\n  // return new element.type(element.props)\n}\n\nmodule.exports = instantiateComponent;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/instantiateComponent.js","'use strict';\n\nfunction createElement(type, config, children) {\n  // Clone the passed in config (props). In React we move some special\n  // props off of this object (keys, refs).\n  let props = Object.assign({}, config);\n\n  // Build props.children. We'll make it an array if we have more than 1.\n  let childCount = arguments.length - 2;\n  if (childCount === 1) {\n    props.children = children;\n  } else if (childCount > 1) {\n    props.children = Array.prototype.slice.call(arguments, 2);\n  }\n\n  // React Features not supported:\n  // - keys\n  // - refs\n  // - defaultProps (usually set here)\n\n  return {\n    type,\n    props,\n  };\n}\n\nfunction isValidElement(element) {\n  let typeofElement = typeof element;\n  let typeofType = element.type && typeof element.type;\n  return (\n    typeofElement === 'string' ||\n    typeofElement === 'number' ||\n    typeofType === 'string' ||\n    (typeofType === 'function' && element.type.isDilithiumClass)\n  );\n}\n\nmodule.exports = {\n  createElement,\n  isValidElement,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Element.js","'use strict';\n\nconst assert = require('./assert');\n\nlet implementation;\n\nfunction construct(element) {\n  assert(implementation);\n\n  return new implementation(element);\n}\n\nfunction constructTextComponent(element) {\n  // Create wrapper element. It will just be a span.\n  return construct({\n    type: 'span',\n    props: {\n      children: element,\n    },\n  });\n}\n\nfunction inject(impl) {\n  implementation = impl;\n}\n\nmodule.exports = {\n  inject,\n  construct,\n  constructTextComponent,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/HostComponent.js","'use strict';\n\n// Remove all children from this node.\nfunction empty(node) {\n  [].slice.call(node.childNodes).forEach(node.removeChild, node);\n}\n\n// Very naive version of React's DOM property setting algorithm. Many\n// properties need to be updated differently.\nfunction setProperty(node, attr, value) {\n  // The DOM Component layer in this implementation isn't filtering so manually\n  // skip children here.\n  if (attr === 'children') {\n    return;\n  }\n\n  node.setAttribute(attr, value);\n}\n\n// Remove the property from the node.\nfunction removeProperty(node, attr) {\n  node.removeAttribute(attr);\n}\n\nfunction updateStyles(node, styles) {\n  Object.keys(styles).forEach(style => {\n    // TODO: Warn about improperly formatted styles (eg, contains hyphen)\n    // TODO: Warn about bad vendor prefixed styles\n    // TODO: Warn for invalid values (eg, contains semicolon)\n    // TODO: Handle shorthand property expansions (eg 'background')\n    // TODO: Auto-suffix some values with 'px'\n    node.style[style] = styles[style];\n  });\n}\n\nfunction appendChild(node, child) {\n  node.appendChild(child);\n}\n\nfunction appendChildren(node, children) {\n  if (Array.isArray(children)) {\n    children.forEach(child => appendChild(node, child));\n  } else {\n    appendChild(node, children);\n  }\n}\n\nfunction insertChildAfter(node, child, afterChild) {\n  node.insertBefore(\n    child,\n    afterChild ? afterChild.nextSibling : node.firstChild,\n  );\n}\n\nfunction removeChild(node, child) {\n  node.removeChild(child);\n}\n\nmodule.exports = {\n  setProperty,\n  removeProperty,\n  updateStyles,\n  empty,\n  appendChild,\n  appendChildren,\n  insertChildAfter,\n  removeChild,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/DOM.js","'use strict';\n// NOTE: @returns {boolean} - tells us whether the elements are of the same type, otherwise we might need a new component instead of an update\n// This determines if we're going to end up reusing an internal instance or not.\n// This is one of the big shortcuts that React does, stopping us from\n// instantiating and comparing full trees. Instead we immediately throw away\n// a subtree when updating from one element type to another.\nfunction shouldUpdateComponent(prevElement, nextElement) {\n  let prevType = typeof prevElement;\n  let nextType = typeof nextElement;\n\n  // Quickly allow strings.\n  if (prevType === 'string') {\n    return nextType === 'string';\n  }\n\n  // Otherwise look at element.type. In React we would also look at the key.\n  return prevElement.type === nextElement.type;\n}\n\nmodule.exports = shouldUpdateComponent;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/shouldUpdateComponent.js","'use strict';\n\nconst Element = require('./Element');\nconst assert = require('./assert');\nconst DOM = require('./DOM');\nconst shouldUpdateComponent = require('./shouldUpdateComponent');\nconst instantiateComponent = require('./instantiateComponent');\nconst Reconciler = require('./Reconciler');\n\nconst ROOT_KEY = 'dlthmRootId';\nlet rootID = 1;\n\n// Used to track root instances.\nconst instancesByRootID = {};\n\n\n// NOTE: checks if we this node is already rendered as root\nfunction isRoot(node) {\n  if (node.dataset[ROOT_KEY]) {\n    return true;\n  }\n  return false;\n}\n\nfunction render(element, node) {\n  // TODO: learn render debugger\n  assert(Element.isValidElement(element));\n\n  // First check if we've already rendered into this node.\n  // If so, we'll be doing an update.\n  // Otherwise we'll assume this is an initial render.\n  if (isRoot(node)) {\n    update(element, node);\n  } else {\n    mount(element, node);\n  }\n}\n\nfunction mount(element, node) {\n  // NOTE: ?! what is this doing? `dataset`: sets data-dlthm-root-id=\"1\" by using DOMNode.dataset api\n  // Mark this node as a root.\n  node.dataset[ROOT_KEY] = rootID;\n\n  // Create the internal instance. We're assuming for now that we only have\n  // `Component`s being rendered at the root.\n  let component = instantiateComponent(element);\n\n  // NOTE: stores the component or <wrapperInstance>\n  instancesByRootID[rootID] = component;\n\n  // This will return a DOM node. React does more work here to determine if we're remounting\n  // server-rendered content.\n  let renderedNode = Reconciler.mountComponent(component, node);\n\n  // Empty out `node` so we can put it under our control.\n  DOM.empty(node);\n\n  DOM.appendChild(node, renderedNode);\n\n  // Incrememnt rootID so we can track appropriately.\n  rootID++;\n}\n\nfunction update(element, node) {\n  // Ensure we have a valid root node\n  assert(node && isRoot(node));\n\n  // Find the internal instance and update it\n  let id = node.dataset[ROOT_KEY];\n\n  let instance = instancesByRootID[id];\n\n  if (shouldUpdateComponent(instance, element)) {\n    // TODO: do the update\n  } else {\n    // Unmount and then mount the new one\n    unmountComponentAtNode(node);\n    mount(element, node);\n  }\n\n  // TODO: update\n}\n\nfunction unmountComponentAtNode(node) {\n  // Ensure we have a valid root node\n  assert(node && isRoot(node));\n\n  let id = node.dataset[ROOT_KEY];\n\n  // In React we would do a batch unmount operation. This would in turn call\n  // componentWillUnmount for each instance. We aren't going to support that,\n  // so we can just delete the top level instance and let everything get garbage\n  // collected.\n  let instance = instancesByRootID[id];\n  Reconciler.unmountComponent(instance);\n\n  delete instancesByRootID[id];\n\n  // Reset the DOM node\n  DOM.empty(node);\n  delete node.dataset[ROOT_KEY];\n}\n\nmodule.exports = {\n  render,\n  unmountComponentAtNode,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/Mount.js","'use strict';\n\nconst MultiChild = require('./MultiChild');\nconst DOM = require('./DOM');\nconst assert = require('./assert');\n\nclass DOMComponentWrapper extends MultiChild {\n  // NOTE: - params { object } - { type: <String, Component subclass>, props: <Object>\n  constructor(element) {\n    super();\n    this._currentElement = element;\n    this._domNode = null;\n  }\n\n  mountComponent() {\n    // TODO: special handling for various element types\n    // TODO: determine namespace DOM element should be created in (eg svg)\n    // TODO: validate DOM nesting for helpful warnings\n    // TODO: even more specifically handle <script> tags so code doesn't run\n    // TODO: custom elements need to be created slightly differently\n\n    // Create the DOM element\n    let el = document.createElement(this._currentElement.type);\n\n    this._domNode = el;\n\n    this._updateDOMProperties({}, this._currentElement.props);\n\n    // BETTER: only pass in `this._currentElement.props.children`\n    this._createInitialDOMChildren(this._currentElement.props);\n\n    return el;\n  }\n\n  unmountComponent() {\n    // React needs to do some special handling for some node types, specifically\n    // removing event handlers that had to be attached to this node and couldn't\n    // be handled through propagation.\n    this.unmountChildren();\n  }\n\n  receiveComponent(nextElement) {\n    this.updateComponent(this._currentElement, nextElement);\n  }\n\n  updateComponent(prevElement, nextElement) {\n    // debugger;\n    this._currentElement = nextElement;\n    this._updateDOMProperties(prevElement.props, nextElement.props);\n    this._updateDOMChildren(prevElement.props, nextElement.props);\n  }\n\n  _createInitialDOMChildren(props) {\n    // Text content\n    if (\n      typeof props.children === 'string' ||\n      typeof props.children === 'number'\n    ) {\n      // TODO: validate element type can have text children\n      // TODO: wrap with helper, there are browser inconsistencies\n      this._domNode.textContent = props.children;\n    } else if (props.children) {\n      // Single element or Array\n      let mountImages = this.mountChildren(props.children);\n      DOM.appendChildren(this._domNode, mountImages);\n    }\n  }\n\n  _updateDOMChildren(prevProps, nextProps) {\n    // React does a bunch of work to handle dangerouslySetInnerHTML.\n    // React also handles switching between text children and more DOM nodes.\n    // We will simply assert if we are toggling.\n    let prevType = typeof prevProps.children;\n    let nextType = typeof nextProps.children;\n    assert(prevType === nextType);\n\n    // Childless node, skip\n    if (nextType === 'undefined') {\n      return;\n    }\n    // NOTE: Core, everything above are precondition checks\n    // Much like the initial step, handline text differently than elements.\n    if (nextType === 'string' || nextType === 'number') {\n      this._domNode.textContent = nextProps.children;\n    } else {\n      this.updateChildren(nextProps.children);\n    }\n  }\n\n  // NOTE: handles updating(by that it means removing and adding) DOM props\n  _updateDOMProperties(prevProps, nextProps) {\n    let styleUpdates = {};\n\n    // Loop over previous props so we know what we need to remove\n    Object.keys(prevProps).forEach(prop => {\n      // We're updating or adding a value, which we'll catch in the next loop so\n      // we can skip here. That means the only props remaining will be removals.\n      if (nextProps.hasOwnProperty(prop) || prevProps[prop] == null) {\n        // NOTE: if nextProp has the said prop (hence it must be updating the value) OR if this prop is null/undefined previously.\n        return;\n      }\n\n      // NOTE: ?! how do you know there are NO new ones, (seems like you are just readding them later)\n      // Unset all previous styles since we know there are no new ones.\n      if (prop === 'style') {\n        Object.keys(prevProps[prop]).forEach(style => {\n          styleUpdates[style] = '';\n        });\n      } else {\n        // Handle propery removals. In React we currently have a white list of known\n        // properties, which allows us to special case some things like \"checked\".\n        // We'll just remove blindly.\n        DOM.removeProperty(this._domNode, prop);\n      }\n    });\n\n    // Handle updates / additions\n    Object.keys(nextProps).forEach(prop => {\n      let prevValue = prevProps[prop];\n      let nextValue = nextProps[prop];\n\n      // Don't do anything if we have identical values.\n      if (Object.is(prevValue, nextValue)) {\n        return;\n      }\n\n      if (prop === 'style') {\n        // Update carefully. We need to remove old styles and add new ones\n        if (prevValue) {\n          // NOTE: remove if `nextValue.false?` (is actually `nextStyle`) or next value didn't specify the current `styleAttr`\n          Object.keys(prevValue).forEach(style => {\n            if (!nextValue || !nextValue.hasOwnProperty(style)) {\n              styleUpdates[style] = '';\n            }\n          });\n          // NOTE: replace if different\n          Object.keys(nextValue).forEach(style => {\n            if (prevValue[style] !== nextValue[style]) {\n              styleUpdates[style] = nextValue[style];\n            }\n          });\n        } else {\n          // If there was no previous style, we can just treat the new style as the update.\n          styleUpdates = nextValue;\n        }\n      } else {\n        // DOM updates\n        DOM.setProperty(this._domNode, prop, nextValue);\n      }\n\n      DOM.updateStyles(this._domNode, styleUpdates);\n    });\n  }\n}\n\nmodule.exports = DOMComponentWrapper;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/DOMComponentWrapper.js","'use strict';\n\nconst Reconciler = require('./Reconciler');\nconst ChildReconciler = require('./ChildReconciler');\nconst traverseAllChildren = require('./traverseAllChildren');\n\nconst DOM = require('./DOM');\n\nconst UPDATE_TYPES = {\n  INSERT: 1,\n  MOVE: 2,\n  REMOVE: 3,\n};\n\n// NOTE: returns action-like objects. `type` defines the action name\nconst OPERATIONS = {\n  insert(component, node, afterNode) {\n    return {\n      type: UPDATE_TYPES.INSERT,\n      content: node,\n      toIndex: component._mountIndex,\n      afterNode: afterNode,\n    };\n  },\n\n  move(component, afterNode, toIndex) {\n    return {\n      type: UPDATE_TYPES.MOVE,\n      fromIndex: component._mountIndex,\n      toIndex: toIndex,\n      afterNode: afterNode,\n    };\n  },\n\n  remove(component, node) {\n    return {\n      type: UPDATE_TYPES.REMOVE,\n      fromIndex: component._mountIndex,\n      fromNode: node,\n    };\n  },\n};\n\n// NOTE: gets all children into a flattened context:\n// NOTE:   { .0.0: element1, .1.0: element2 }\nfunction flattenChildren(children) {\n  let flattenedChildren = {};\n  traverseAllChildren(\n    children,\n    (context, child, name) => (context[name] = child),\n    flattenedChildren,\n  );\n\n  return flattenedChildren;\n}\n\n// WARN: what is react doing!?\n// In React we do this in an injection point, allowing MultiChild to be used\n// across renderers. We don't do that here to reduce overhead.\n// NOTE: actually processing `OPERATION` objects\nfunction processQueue(parentNode, updates) {\n  updates.forEach(update => {\n    switch (update.type) {\n      case UPDATE_TYPES.INSERT:\n        DOM.insertChildAfter(parentNode, update.content, update.afterNode);\n        break;\n\n      case UPDATE_TYPES.MOVE:\n        DOM.insertChildAfter(\n          parentNode,\n          parentNode.childNodes[fromIndex],\n          update.afterNode,\n        );\n        break;\n\n      case UPDATE_TYPES.REMOVE:\n        DOM.removeChild(parentNode, update.fromNode);\n        break;\n\n      default:\n        assert(false);\n    }\n  });\n}\n\nclass MultiChild {\n  mountChildren(children) {\n    // Instantiate all of the actual child instances into a flat object. This\n    // handles all of the complicated logic around flattening subarrays.\n    let renderedChildren = ChildReconciler.instantiateChildren(children);\n\n    /*\n    {\n      '.0.0': {_currentElement, ...}\n      '.0.1': {_currentElement, ...}\n    }\n    */\n\n    // Store the reference, we'll need this when updating.\n    this._renderedChildren = renderedChildren;\n\n    // We'll turn that renderedChildren object into a flat array and recurse,\n    // mounting their children.\n    let mountImages = Object.keys(renderedChildren).map((childKey, i) => {\n      let child = renderedChildren[childKey];\n\n      child._mountIndex = i;\n\n      return Reconciler.mountComponent(child);\n    });\n\n    return mountImages;\n  }\n\n  unmountChildren() {\n    ChildReconciler.unmountChildren(this._renderedChildren);\n  }\n\n  // NOTE: @params - [<Element>]\n  updateChildren(nextChildren) {\n    // NOTE: this is previously rendered[<Components>]\n    let prevRenderedChildren = this._renderedChildren;\n\n    let mountImages = [];\n    let removedNodes = {};\n\n    let nextRenderedChildren = flattenChildren(nextChildren);\n\n    // NOTE: updates `removedNodes` so that we can remove these later.\n    ChildReconciler.updateChildren(\n      prevRenderedChildren,\n      nextRenderedChildren,\n      mountImages,\n      removedNodes,\n    );\n\n    // The following is the bread & butter of React. We'll compare the current\n    // set of children to the next set.\n    // We need to determine what nodes are being moved around, which are being\n    // inserted, and which are getting removed. Luckily, the removal list was\n    // already determined by the ChildReconciler.\n\n    // WARN: bookmark\n    // We'll store a serious of update operations here.\n    let updates = [];\n\n    let lastIndex = 0;\n    let nextMountIndex = 0;\n    let lastPlacedNode = null;\n\n    Object.keys(nextRenderedChildren).forEach((childKey, nextIndex) => {\n      let prevChild = prevRenderedChildren[childKey];\n      let nextChild = nextRenderedChildren[childKey];\n\n      // If the are identical, record this as an update. We might have inserted\n      // or removed nodes.\n      // NOTE: if component vs component comparison\n      if (prevChild === nextChild) {\n        // WARN: not understanding what this `move` OPERATION is doing (shouldn't this be an update if its same component?), defering to place wehre `updates`<Array> is being consumed\n        // We don't actually need to move if moving to a lower index. Other\n        // operations will ensure the end result is correct.\n        if (prevChild._mountIndex < lastIndex) {\n          updates.push(OPERATIONS.move(prevChild, lastPlacedNode, nextIndex));\n        }\n        lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        prevChild._mountIndex = nextIndex;\n      } else {\n        // Otherwise we need to record an insertion. Removals will be handled below\n        // First, if we have a prevChild then we know it's a removal.\n        // We want to update lastIndex based on that.\n        if (prevChild) {\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        }\n\n        nextChild._mountIndex = nextIndex;\n        updates.push(\n          OPERATIONS.insert(\n            nextChild,\n            mountImages[nextMountIndex],\n            lastPlacedNode,\n          ),\n        );\n        nextMountIndex++;\n      }\n\n      // NOTE: used as `afterNode` by `OPERATIONS`, not sure what this keep track is accomplishing other than maybe order\n      lastPlacedNode = nextChild._domNode;\n    });\n\n    // Enqueue removals\n    Object.keys(removedNodes).forEach(childKey => {\n      updates.push(\n        OPERATIONS.remove(\n          prevRenderedChildren[childKey],\n          removedNodes[childKey],\n        ),\n      );\n    });\n\n    // NOTE: updates is a list of `OPERATIONS`\n    processQueue(this._domNode, updates);\n\n    this._renderedChildren = nextRenderedChildren;\n  }\n}\n\nmodule.exports = MultiChild;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/MultiChild.js","'use strict';\n\nconst instantiateComponent = require('./instantiateComponent');\nconst traverseAllChildren = require('./traverseAllChildren');\nconst shouldUpdateComponent = require('./shouldUpdateComponent');\n\nconst Reconciler = require('./Reconciler');\n\n// This *right here* is why keys are critical to preventing reordering issues.\n// React will reuse an existing instance if there is one in this subtree.\n// The instance identity here is determined by the generated key based on\n// depth in the tree, parent, and (in React) the key={} prop.\nfunction instantiateChild(childInstances, child, name) {\n  let isUnique = childInstances[name] === undefined;\n\n  if (isUnique) {\n    childInstances[name] = instantiateComponent(child);\n  }\n}\n\nfunction instantiateChildren(children) {\n  // We store the child instances here, which are in turn used passed to\n  // instantiateChild. We'll store this object for reuse when doing updates.\n  let childInstances = {};\n\n  traverseAllChildren(children, instantiateChild, childInstances);\n\n  return childInstances;\n}\n\n// NOTE: updateChildren compares prevChildren and nextChildren and update the component or removes it\n// WARN: not fully understood, will comeback\nfunction updateChildren(\n  prevChildren, // TODO: Instances of Components, as created above\n  nextChildren, // TODO: Actually elements, should be called nextChildElements\n  mountImages,\n  removedChildren,\n) {\n  // Just make our code a little bit cleaner so we don't have to do null checks.\n  // React skips this to avoid extraneous objects.\n  prevChildren = prevChildren || {};\n\n  // NOTE: below\n  // Loop over our new children and determine what is being updated, removed,\n  // and created.\n  Object.keys(nextChildren).forEach(childKey => {\n    // NOTE: grabs { prevComponent, prevElement, and nextElement} respectively\n    let prevChild = prevChildren[childKey];\n    let prevElement = prevChild && prevChild._currentElement;\n    let nextElement = nextChildren[childKey];\n\n    // Update\n    if (prevChild && shouldUpdateComponent(prevElement, nextElement)) {\n      // Update the existing child with the reconciler. This will recurse\n      // through that component's subtree.\n      Reconciler.receiveComponent(prevChild, nextElement);\n\n      // We no longer need the new instance, so replace it with the old one.\n      nextChildren[childKey] = prevChild;\n    } else {\n      // Otherwise\n      // Remove the old child. We're replacing.\n      if (prevChild) {\n        // TODO: make this work for composites\n        removedChildren[childKey] = prevChild._domNode;\n        Reconciler.unmountComponent(prevChild);\n      }\n\n      // Instantiate the new child.\n      let nextChild = instantiateComponent(nextElement);\n      nextChildren[childKey] = nextChild;\n\n      // React does this here so that refs resolve in the correct order.\n      mountImages.push(Reconciler.mountComponent(nextChild));\n    }\n  });\n\n  // NOTE: below\n  // Last but not least, remove the old children which no longer have any presense.\n  Object.keys(prevChildren).forEach(childKey => {\n    // debugger;\n    // NOTE: if nextChildren has no such childKey from prevChildren (meaning if its removed), set the domNode onto `removedChildren` removedChildren['0.1']` and unmount the prevChild <Component>\n    if (!nextChildren.hasOwnProperty(childKey)) {\n      prevChild = prevChildren[childKey];\n      removedChildren[childKey] = prevChild._domNode;\n      Reconciler.unmountComponent(prevChild);\n    }\n  });\n}\n\nfunction unmountChildren(renderedChildren) {\n  if (!renderedChildren) {\n    return;\n  }\n  Object.keys(renderedChildren).forEach(childKey => {\n    Reconciler.unmountComponent(renderedChildren[childKey]);\n  });\n}\n\nmodule.exports = {\n  instantiateChildren,\n  updateChildren,\n  unmountChildren,\n};\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/ChildReconciler.js","'use strict';\n\nconst SEPARATOR = '.';\nconst SUBSEPARATOR = ':';\n\nfunction getComponentKey(component, index) {\n  // This is where we would use the key prop to generate a unique id that\n  // persists across moves. However we're skipping that so we'll just use the\n  // index.\n\n  // We'll convert this to base 36 for compactness.\n  return index.toString(36);\n}\n\nfunction traverseAllChildren(children, callback, traverseContext) {\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\n// NOTE: @param `nameSoFar` - adds levels of separator\n// NOTE:   lifecycle: [\n// NOTE:      '.',\n// NOTE:      '.2', // passed into recursion*\n// NOTE:      '.2:'\n// NOTE:      '.2:1' //  passed into next recursion\n// NOTE:    ]\n// NOTE: @param `callback` - `ChildReconciler.instantiateChild`, which invokes `initiateComponent`\n// NOTE: @param `traverseContext` - understood as `childInstances` to keep track of children throughout the recursion. This is used to prevent\n// NOTE:    reorder issues, b/c React will reuse an existing instance (found in traverseContext) if there is one in the subtree.\n// NOTE:    builds something like this, {.0.0: DOMComponentWrapper, .1.0: ColorSwatch, .2.0: DOMComponentWrapper}\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  callback,\n  traverseContext,\n) {\n  // TODO: support null, undefined, booleans, numbers, iterators\n\n  // NOTE: if theres only one child and its not Array, call `callback`, could be `instantiateChild(childInstances, child, name)`, and end\n  // Handle a single child.\n  if (typeof children === 'string' || !Array.isArray(children)) {\n    // We'll treat this name as if it were a lone item in an array, as going from\n    // a single child to an array is fairly common.\n\n    // This callback gets called with traverseContext as an argument. This is\n    // passed in from the reconciler and it used there to track the children.\n    // NOTE: tracks the level of scoping for each traverse, through recursively invoking `traverseAllChildrenImpl` on each child\n    callback(\n      traverseContext,\n      children,\n      nameSoFar + SEPARATOR + getComponentKey(children, 0),\n    );\n    return 1;\n  }\n\n  // WARN: ?! whats there to support about iterators? maybe ES6 iterators?\n  // WARN: ?! when would children be nested?, maybe when it returns an array? <div>{[<div>123</div>]}</div>\n  // NOTE: `subTreeCount` keeps track of number of children.\n  // Otherwise we have an array. React also supports iterators but we won't.\n  // We need to return the number of children so start tracking that.\n  // Note that this isn't simply children.length - since children can contain nested\n  // arrays, we need to account for that too, as those are rendered at the same level.\n  let subTreeCount = 0;\n  let nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  // Loop over all children, generate the next key prefix, and then recurse!\n  children.forEach((child, i) => {\n    let nextName = nextNamePrefix + getComponentKey(child, i);\n    subTreeCount += traverseAllChildrenImpl(\n      child,\n      nextName,\n      callback,\n      traverseContext,\n    );\n  });\n\n  return subTreeCount;\n}\n\nmodule.exports = traverseAllChildren;\n\n\n\n// WEBPACK FOOTER //\n// ../dilithium/src/traverseAllChildren.js"],"sourceRoot":""}